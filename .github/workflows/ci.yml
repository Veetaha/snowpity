name: ci
on:
  pull_request:
  push:
    branches: [master]

env:
  RUSTUP_MAX_RETRIES: 50
  CARGO_NET_RETRY: 50
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

  # We don't need debug symbols on CI
  RUSTFLAGS: --deny warnings -Cdebuginfo=0
  RUSTDOCFLAGS: --deny warnings

concurrency:
  cancel-in-progress: true
  group: "ci-${{ github.workflow }}-${{ github.ref }}"

jobs:
  terraform-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          # Make sure to keep it in sync with the version requirement in tf project
          terraform_version: ">=1.3"

      - run: terraform fmt -check -recursive

      - run: terraform init -lockfile=readonly
        working-directory: deployment/project

      # HACK: our terraform project assumes there is an ssh key at this path
      - run: mkdir -p ~/.ssh && touch ~/.ssh/id_rsa.pub

      - run: terraform validate
        working-directory: deployment/project

  taplo-fmt-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/download/taplo.sh
      - run: ./taplo fmt --check

  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/download/typos.sh
      - run: ./typos

  cargo-deny-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}

  # Lightweight check for unused dependencies that uses simple regex search
  rust-unused-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: ./scripts/download/cargo-machete.sh
      - run: ./cargo-machete

  rust-lint:
    runs-on: ubuntu-latest

    # We don't want unstable jobs to fail our cicd
    continue-on-error: ${{ matrix.toolchain == 'beta' || matrix.toolchain == 'nightly' }}

    strategy:
      matrix:
        toolchain: [stable, beta, nightly]

    steps:
      - uses: actions/checkout@v4

      - if: ${{ matrix.toolchain == 'stable' }}
        run: echo RUSTUP_TOOLCHAIN=$(cat rust-toolchain) >> $GITHUB_ENV

      - if: ${{ matrix.toolchain != 'stable' }}
        run: echo 'RUSTUP_TOOLCHAIN=${{ matrix.toolchain }}' >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}
          components: rustfmt, clippy

      - run: cargo fmt --all -- --check
      - run: cargo doc --workspace --no-deps
      - run: cargo clippy --workspace --all-targets --all-features

  rust-test:
    runs-on: ubuntu-latest

    # We don't want unstable jobs to fail our cicd
    continue-on-error: ${{ matrix.toolchain == 'beta' || matrix.toolchain == 'nightly' }}

    strategy:
      matrix:
        toolchain: [stable, beta, nightly]

    steps:
      - uses: actions/checkout@v4

      - if: ${{ matrix.toolchain == 'stable' }}
        run: echo RUSTUP_TOOLCHAIN=$(cat rust-toolchain) >> $GITHUB_ENV

      - if: ${{ matrix.toolchain != 'stable' }}
        run: echo 'RUSTUP_TOOLCHAIN=${{ matrix.toolchain }}' >> $GITHUB_ENV

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUSTUP_TOOLCHAIN }}

      # We don't pass `--all-targets` flag, because it actually disables doc tests...
      # The issue in `cargo` repository: https://github.com/rust-lang/cargo/issues/6669
      #
      # Run the build (--no-run) in a separate step to keep track of tests build time
      # and run time separately easier.
      - run: cargo test --workspace --all-features --no-run
      - run: cargo test --workspace --all-features
